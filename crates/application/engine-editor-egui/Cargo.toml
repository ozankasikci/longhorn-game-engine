[package]
name = "engine-editor-egui"
version.workspace = true
edition.workspace = true
license.workspace = true
description = "editor egui for Longhorn Game Engine"

[[bin]]
name = "longhorn-editor"
path = "src/main.rs"

[[bench]]
name = "compilation_benchmark"
harness = false

[dependencies]
# Engine core integration
engine-ecs-core = { workspace = true }
engine-components-3d = { workspace = true }
engine-components-2d = { workspace = true }
engine-components-ui = { workspace = true }
engine-renderer-3d = { workspace = true }
engine-geometry-core = { workspace = true }
engine-resource-core = { workspace = true }
engine-camera-impl = { workspace = true }
engine-runtime = { workspace = true }
engine-runtime-core = { workspace = true }
engine-input = { workspace = true }
engine-editor-scene-view = { path = "../engine-editor-scene-view" }
engine-editor-panels = { path = "../engine-editor-panels" }
engine-editor-ui = { path = "../engine-editor-ui" }
engine-editor-assets = { path = "../engine-editor-assets" }
engine-editor-framework = { path = "../engine-editor-framework" }
engine-scripting = { workspace = true }

# EGUI and platform integration
egui = { workspace = true }
eframe = { workspace = true }
egui_dock = { workspace = true }

# Utilities
serde = { workspace = true }
env_logger = { workspace = true }
toml = "0.8"
dirs = "5.0"
uuid = { version = "1.0", features = ["v4", "serde"] }
notify = { workspace = true }
bincode = "1.3"
async-trait = "0.1"
rfd = "0.15"
clap = { version = "4.0", features = ["derive"] }

# Asset import
engine-asset-import = { workspace = true }
engine-mesh-import = { workspace = true }
engine-texture-import = { workspace = true }
engine-audio-import = { workspace = true }

# WGPU integration - needed to pass device/queue to renderer initialization
# TODO: Consider abstracting this behind a renderer factory interface
glam = { workspace = true }
log = { workspace = true }

[dev-dependencies]
criterion = "0.5"
tokio = { version = "1.35", features = ["rt-multi-thread", "macros", "test-util"] }
